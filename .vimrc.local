" Modeline and Notes {
" vim: set foldmarker={,} foldlevel=0 foldmethod=marker:
"
"   This is the personal .vimrc.local file of James Tomasino.
"   While much of it is beneficial for general use, I would
"   recommend picking out the parts you want and understand.
"
"   You can find me at http://tomasino.org
" }

" Bundle Management {

	" Remove Bundles {
		UnBundle 'AutoClose'
		UnBundle 'amirh/HTML-AutoCloseTag'
		UnBundle 'myusuf3/numbers.vim'
		UnBundle 'mbbill/undotree'
	" }

	" disable bufexplorer until the weird buffer bugs are fixed {
		let g:bufexplorer_version = 'disabled'
	" }

	" disable neocomplcache {
		let g:neocomplcache_disable_auto_complete = 1
	" }

	" disable fastTabs { 
		let g:spf13_no_fastTabs = 1
	" }
" }


" General Settings {

	" kill utf-8 bytemarks {
		set nobomb
		setglobal nobomb
		set fileencoding=utf-8
		au BufReadPost setlocal nobomb
	" }

	" No spaces. Use tabs {
		set noexpandtab
	" }

	" No error bells {
		set noerrorbells
	" }

	" No spell checking by default {
		set nospell
	" }

	" Authoring {
		let g:snips_author = 'James Tomasino <james@tomasino.org>'
	" }

" }


" Key Mappings {

	" General Mappings {
		map <F1> <Esc>
		imap <F1> <Esc>
		cnoremap %% <C-R>=expand('%:h').'/'<cr>
		nnoremap Y y$
		inoremap jk <Esc>
	" }

	" Movement Keys {
		inoremap <up> <nop>
		vnoremap <up> <nop>
		inoremap <down> <nop>
		vnoremap <down> <nop>
		inoremap <left> <nop>
		vnoremap <right> <nop>
		vnoremap <left> <nop>
		inoremap <right> <nop>
		" B-A-<start>

		" Tab and window nav with arrows
		map <up> <C-W>k<C-W>_
		map <down> <C-W>j<C-W>_
		map <left> <C-W>h<C-W>_
		map <right> <C-W>l<C-W>_

		unmap <C-K>
		unmap <C-J>
		unmap <C-H>
		unmap <C-L>
	" }

	" QuickfixList and ToggleLocationList window toggles {
		nnoremap <script> <silent> <leader>L :call ToggleLocationList()<CR>
		nnoremap <script> <silent> <leader>Q :call ToggleQuickfixList()<CR>
	" }

	" Sideways mapping toggles {
		nnoremap <S-Left> :SidewaysLeft<cr>
		nnoremap <S-Right> :SidewaysRight<cr>
	" }


	" Visual text bubbling remap from vim-unimpared {
		nnoremap <C-Up> ddkP
		nnoremap <C-Down> ddp
		vmap <C-Up> xkP`[V`]
		vmap <C-Down> xp`[V`]
	" }

	" Visually select last edited/pasted text {
		nnoremap gV `[v`]
	" }

" }


" Plugin Tweaks {

	" Tweak neocomplecache to offer dropdown only when you hit tab {
		inoremap <expr><TAB> pumvisible() ? "\<C-n>" : <SID>check_back_space() ? "\<TAB>" : "\<C-x>\<C-u>"
		function! s:check_back_space()"{{{
		let col = col('.') - 1
		return !col || getline('.')[col - 1] =~ '\s'
		endfunction"}}
		let g:neocomplcache_enable_auto_select = 1
		inoremap <expr><C-l> neocomplcache#complete_common_string()
		inoremap <expr><C-h> neocomplcache#smart_close_popup().“\<C-h>”
	" }

" }



" Visual Tweaks {

	" Position gitcommits at top line no matter what {
		autocmd FileType gitcommit call setpos('.', [0, 1, 1, 0])
	" }

	" Highlight past 80 columns and keep it dark grey {
		set colorcolumn=80
		autocmd ColorScheme * highlight ColorColumn guibg=grey15
		highlight ColorColumn ctermbg=235 guibg=grey15
	" }

	" GUI / CTERM specifics {
		if has('gui_running')
			color twilight
			if has('gui_macvim')
				set transparency=0
			endif
		else
			let g:solarized_termcolors=256
			color ir_black-256
			let g:indent_guides_enable_on_vim_startup = 0
		endif
	" }

" }


" Functions {

	" StripTrailingWhitespace function {
		function! <SID>StripTrailingWhitespaces()
			" Preparation: save last search, and cursor position.
			let _s=@/
			let l = line(".")
			let c = col(".")
			" Do the business:
			%s/\s\+$//e
			" Clean up: restore previous search history, and cursor position
			let @/=_s
			call cursor(l, c)
		endfunction

		au BufWritePre *.py,*.js,*.scss,*.as :call <SID>StripTrailingWhitespaces()
	" }

" }
